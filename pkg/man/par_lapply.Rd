% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/5_parallel.R
\name{par_lapply}
\alias{par_lapply}
\title{Parallel apply function to list in all platforms}
\usage{
par_lapply(lst, fun, reserved_cores = 0, parallel = TRUE,
  win_init = ctmmweb:::WIN_INIT_ctmm)
}
\arguments{
\item{lst}{Input list.}

\item{fun}{Function to be applied on \code{lst}. Note only single parameter
function is accepted, otherwise it's difficult to determine how to assign
input parameters to each list item and worker. You need to convert multiple
parameter function into a function take single list parameter, and assign
parameters in that list accordingly. \code{\link[=align_list]{align_list()}} is a helper function to
align two lists.}

\item{reserved_cores}{reserve some cores so that not all cores are used.
Check your platform's core count with
\code{parallel::detectCores(logical = FALSE)}. \code{?parallel::detectCores}
has more details about physical/logical cores in different platforms.}

\item{parallel}{Use regular \code{lapply} when FALSE}

\item{win_init}{Expression to be initialized in Windows. Because all
parameters should be included in the input list already, this usually means
library calls, like \code{{library(ctmm)}} for ctmm related operations, which
has been taken care of with the default value \code{ctmmweb:::WIN_INIT_ctmm}.}
}
\value{
List of applied results
}
\description{
This is a generic parallel lapply that work across all major platforms.
}
\details{
In Windows \code{parallel::parLapplyLB} is used, which is a socket cluster and
need to initialize each session manually with \code{win_init} if needed. In
Linux/Mac \code{parallel::mclapply} is used, where each worker will inherit the
current environment through forking, so no additional setup is required.
}
